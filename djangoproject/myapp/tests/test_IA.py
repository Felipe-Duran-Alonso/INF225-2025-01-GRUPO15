from django.test import TestCase, Client
from django.urls import reverse
from myapp.models import Requerimiento
from django.contrib.auth.models import User

class TestIA(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.url_ia = reverse("resumir_texto")
        cls.staff = User.objects.create_user(username='test', password='contrasena',is_staff=True)
        
    def setUp(self):
        self.client.login(username='test', password='contrasena')
        
    
    def test_texto_caracteres_especiales(self):
        #texto largo
        texto = 'En un peque√±o pueblo llamado √ëu√±oa, viv√≠a Ana, una ni√±a curiosa y llena de energ√≠a üöÄ. Cada ma√±ana, al despertar, pensaba en las maravillas del universo: desde el ‚àû infinito hasta la misteriosa f√≥rmula ‚àö(x¬≤ + y¬≤) = z, que le ense√±√≥ su abuelo, un viejo matem√°tico üë¥. Ana amaba las historias que terminaban con un signo de interrogaci√≥n ¬øPor qu√©? ‚Äîse preguntaba‚Äî porque en la vida todo tiene un porqu√©. En su cuaderno, anotaba palabras en varios idiomas: ‰Ω†Â•Ω, –ø—Ä–∏–≤–µ—Ç, ŸÖÿ±ÿ≠ÿ®ÿß, junto a emoticones como üòÇ y üéâ que usaba para expresar alegr√≠a o sorpresa. Le fascinaba c√≥mo el mundo est√° lleno de s√≠mbolos, desde el ¬© copyright hasta el ‚Ñ¢ de sus marcas favoritas. Un d√≠a, mientras exploraba el bosque cercano, encontr√≥ un libro antiguo con p√°ginas llenas de ¬´secretos¬ª y ecuaciones, y supo que su aventura apenas comenzaba‚Ä¶'
        response = self.client.post(self.url_ia,{
            'texto': texto
        })
        
        self.assertEqual(response.status_code, 200)#Funcion√≥ bien, renderiz√≥->IA devolvi√≥ un texto.
        
        #Res√∫men retornado por IA.
        resumen = response.context['resumen']
        print(resumen)
        #Resumen no vac√≠o
        self.assertTrue(resumen.strip())
        
        #Texto tenga un largo mayo a algo
        self.assertGreater(len(resumen),15)
        
        #Que tenga palabras clave ana, abuelo, √±u√±oa.
        palabras_clave = ["ana","√±u√±oa","s√≠mbolos"]
        self.assertTrue(any(palabra in resumen.lower() for palabra in palabras_clave))
        
        

    
    def test_texto_largo(self):
        #texto largo
        texto = 'palabra'*3000
        
        #Env√≠a un texto largo.
        response = self.client.post(self.url_ia,{
                'texto': texto
        })
            
        #No se cae la p√°gina, te renderiza igual    
        self.assertEqual(response.status_code, 200)

        #Verifica si la respuesta por parte de la IA es un mensaje de error, si ERROR:
        # esta dentro del mensaje retornado por la IA, entonces significa que dio error. 
        self.assertIn("ERROR:",response.content.decode())
    
    @classmethod
    def tearDownClass(cls):
        cls.staff.delete()
        super().tearDownClass()